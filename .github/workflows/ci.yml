name: Continuous Integration
on:
  schedule:
    - cron: '0 0 * * 2'
  push:
    branches:
      - main
      - staging
      - trying
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/ci.yml
      - "pyvisa_sim/**"
      - pyproject.toml
      - setup.py

jobs:
  formatting:
    name: Check code formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('dev-requirements.txt') }}
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt
      - name: Format
        run: |
          ruff format pyvisa_sim;
      - name: Lint
        if: always()
        run: |
          ruff check pyvisa_sim;
      - name: Mypy
        if: always()
        run: |
          mypy pyvisa_sim;
  tests:
    name: Unit tests
    runs-on: ${{ matrix.os }}
    needs:
      - formatting
    if: needs.formatting.result == 'success'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Install project
        run: |
          pip install -e .
      - name: Test with pytest
        run: |
          pip install pytest-cov
          pytest --pyargs pyvisa_sim --cov --cov-report xml -v
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # Added to summarize the matrix (otherwise we would need to list every single
  # job in bors.toml)
  tests-result:
    name: Tests result
    if: always()
    needs:
      - tests
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        if: needs.tests.result == 'success'
        run: exit 0
      - name: Mark the job as a failure
        if: needs.tests.result != 'success'
        run: exit 1
