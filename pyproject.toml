[project]
name = "PyVISA-sim"
description = "Simulated backend for PyVISA implementing TCPIP, GPIB, RS232, and USB resources"
readme = "README.rst"
requires-python = ">=3.7"
license = {file = "LICENSE.txt"}
authors = [
  {name = "Hernan E. Grecco", email = "hernan.grecco@gmail.com"},
]
maintainers = [
  {name = "Matthieu C. Dartiailh", email = "m.dartiailh@gmail.com"}
]
keywords = [
    "VISA",
    "GPIB",
    "USB",
    "serial",
    "RS232",
    "measurement",
    "acquisition",
    "simulator",
    "mock",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "pyvisa>=1.11.0",
    "PyYAML",
    "stringparser",
    "typing-extensions",
]
dynamic=["version"]


[project.urls]
homepage = "https://github.com/pyvisa/pyvisa-sim"
documentation = "https://pyvisa-sim.readthedocs.io/en/latest/"
repository = "https://github.com/pyvisa/pyvisa-sim"
changelog = "https://github.com/pyvisa/pyvisa-sim/blob/main/CHANGES.rst"

[build-system]
requires = ["setuptools>=61.2", "wheel", "setuptools_scm[toml]>=3.4.3"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "pyvisa_sim/version.py"
write_to_template = """
# This file is auto-generated by setuptools-scm do NOT edit it.

from collections import namedtuple

#: A namedtuple of the version info for the current release.
_version_info = namedtuple("_version_info", "major minor micro status")

parts = "{version}".split(".", 3)
version_info = _version_info(
    int(parts[0]),
    int(parts[1]),
    int(parts[2]),
    parts[3] if len(parts) == 4 else "",
)

# Remove everything but the 'version_info' from this module.
del namedtuple, _version_info, parts

__version__ = "{version}"
"""

[tool.ruff]
  src = ["src"]
  extend-exclude = ["pyvisa/thirdparty/*"]
  line-length = 88

  [tool.ruff.lint]
    select = ["C", "E", "F", "W", "I", "C90", "RUF"]
    extend-ignore = ["E501", "RUF012"]

    [tool.ruff.lint.isort]
      combine-as-imports = true
      known-first-party = ["pyvisa"]

    [tool.ruff.lint.mccabe]
      max-complexity = 20

[tool.pytest.ini_options]
minversion = "6.0"

[tool.mypy]
follow_imports = "normal"
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "stringparser",
]
ignore_missing_imports = true

[tool.coverage]
  [tool.coverage.run]
    branch = true
    source = ["pyvisa_sim"]

  [tool.coverage.report]
    # Regexes for lines to exclude from consideration
    exclude_lines = [
      # Have to re-enable the standard pragma
      "pragma: no cover",

      # Don't complain if tests don't hit defensive assertion code:
      "raise NotImplementedError",
      "pass",

      # Don't complain about abstract methods, they aren't run:
      "@(abc\\.)?abstractmethod",

      # Don't complain about type checking
      "if TYPE_CHECKING:",

      # Don't complain about ellipsis in overload
      "\\.\\.\\.",
    ]

